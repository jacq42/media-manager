# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, updateEndpoint ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          
      - name: Gradle Command
        # You may pin to the exact commit or the version.
        # uses: eskatos/gradle-command-action@90ccf054e6b9905f30f98c938bce4c6acd323b6b
        uses: eskatos/gradle-command-action@v1.3.3
        with:
          # Path to the Gradle Wrapper directory
          #wrapper-directory: # optional
          # Path to the Gradle executable
          #gradle-executable: # optional
          # Gradle version to use
          #gradle-version: # optional
          # Path to the root directory of the build
          #build-root-directory: # optional
          # Gradle command line arguments, see gradle --help
          arguments: clean test
          # Whether caching wrapper installation is enabled or not, default to 'true'
          #wrapper-cache-enabled: # optional
          # Whether caching dependencies is enabled or not, default to 'false'
          #dependencies-cache-enabled: # optional
          # Globs of files to hash in the build root directory, separated by new lines, use best-effort if unset
          #dependencies-cache-key: # optional
          # Whether to restore only if exact match, default to 'false'
          #dependencies-cache-exact: # optional
          # Whether caching build configuration is enabled or not, default to 'false'
          #configuration-cache-enabled: # optional
          # Globs of files to hash in the build root directory, separated by new lines, use best-effort if unset
          #configuration-cache-key: # optional
          # Whether to restore only if exact match, default to 'false'
          #configuration-cache-exact: # optional
